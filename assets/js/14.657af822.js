(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{321:function(t,s,i){"use strict";i.r(s);var _=i(7),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-认识版本控制-版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-认识版本控制-版本控制"}},[t._v("#")]),t._v(" 1.认识版本控制（版本控制）")]),t._v(" "),s("p",[t._v("什么是版本控制")]),t._v(" "),s("ol",[s("li",[t._v("版本控制的英文是Version control")]),t._v(" "),s("li",[t._v("是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程")]),t._v(" "),s("li",[t._v("版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步")]),t._v(" "),s("li",[t._v("简单来说，版本控制在软件开发中，可以帮助程序员进行"),s("font",{attrs:{color:"red"}},[t._v("代码的追踪、维护、控制")]),t._v("等等一系列的操作")],1)]),t._v(" "),s("h2",{attrs:{id:"_2-版本控制的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-版本控制的功能"}},[t._v("#")]),t._v(" 2.版本控制的功能")]),t._v(" "),s("p",[t._v("对于我们日常开发，我们常常面临如下一些问题，通过版本控制可以很好的解决：")]),t._v(" "),s("ol",[s("li",[t._v("不同版本的存储管理： 一个项目会不断进行版本的迭代，来修复之前的一些问题、增加新的功能、需求，甚至包括项目的重构；如果我们通过手动来维护一系列的项目备份，简直是一场噩梦")]),t._v(" "),s("li",[t._v("重大版本的备份维护： 对于很多重大的版本，我们会进行备份管理")]),t._v(" "),s("li",[t._v("恢复之前的项目版本： 当我们开发过程中发生一些严重的问题时，想要恢复之前的操作或者回到之前某个版本")]),t._v(" "),s("li",[t._v("记录项目的点点滴滴： 如果我们每一个功能的修改、bug的修复、新的需求更改都需要记录下来，版本控制可以很好的解决")]),t._v(" "),s("li",[t._v("多人开发的代码合并： 项目中通常都是多人开发，将多人代码进行合并，并且在出现冲突时更好的进行处理")])]),t._v(" "),s("h2",{attrs:{id:"_3-版本控制的历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-版本控制的历史"}},[t._v("#")]),t._v(" 3.版本控制的历史")]),t._v(" "),s("p",[t._v("版本控制的史前时代（没有版本控制）：人们通常通过文件备份的方式来进行管理，再通过diff命令来对比两个文件的差异；")]),t._v(" "),s("p",[s("strong",[t._v("CVS（Concurrent Versions System）")])]),t._v(" "),s("p",[t._v("第一个被大规模使用的版本控制工具，诞生于1985年；由荷兰阿姆斯特丹VU大学的Dick Grune教授实现的，也算是SVN的前身（SVN的出现就是为了取代CVS的）。")]),t._v(" "),s("p",[s("strong",[t._v("SVN（Subversion）")])]),t._v(" "),s("ol",[s("li",[t._v("因其命令行工具名为svn因此通常被简称为SVN")]),t._v(" "),s("li",[t._v("SVN由CollabNet公司于2000年资助并发起开发，目的是取代CVS，对CVS进行了很多的优化")]),t._v(" "),s("li",[t._v("SVN和CVS一样，也属于集中式版本控制工具")]),t._v(" "),s("li",[t._v("SVN在早期公司开发中使用率非常高，但是目前已经被Git取代")])]),t._v(" "),s("p",[s("strong",[t._v("Git（Linus的作品）")])]),t._v(" "),s("ol",[s("li",[t._v("早期的时候，Linux社区使用的是BitKeeper来进行版本控制")]),t._v(" "),s("li",[t._v("但是因为一些原因，BitKeeper想要收回对Linux社区的免费授权")]),t._v(" "),s("li",[t._v("于是Linus用了大概一周的时间，开发了Git用来取代BitKeeper")]),t._v(" "),s("li",[t._v("Linus完成了Git的核心设计，在之后Linus功成身退，将Git交由另外一个Git的主要贡献者Junio C Hamano来维护")])]),t._v(" "),s("h2",{attrs:{id:"_4-集中式版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-集中式版本控制"}},[t._v("#")]),t._v(" 4.集中式版本控制")]),t._v(" "),s("p",[t._v("CVS和SVN都是是属于集中式版本控制系统（Centralized Version Control Systems，简称 CVCS）")]),t._v(" "),s("p",[t._v("它们的主要特点是：")]),t._v(" "),s("ol",[s("li",[t._v("单一的集中管理的服务器，保存所有文件的修订版本")]),t._v(" "),s("li",[t._v("协同开发人员通过客户端连接到这台服务器，取出最新的文件或者提交更新")])]),t._v(" "),s("p",[t._v("这种做法带来了许多好处，特别是相较于老式的本地管理来说，每个人都可以在一定程度上看到项目中的其他人正在做些什么。")]),t._v(" "),s("p",[t._v("但是集中式版本控制也有一个核心的问题："),s("font",{attrs:{color:"red"}},[t._v("中央服务器不能出现故障")]),t._v("：")],1),t._v(" "),s("ol",[s("li",[t._v("如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作")]),t._v(" "),s("li",[t._v("如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221008224845046.png",alt:"image-20221008224845046"}}),t._v(" "),s("h2",{attrs:{id:"_5-分布式版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式版本控制"}},[t._v("#")]),t._v(" 5.分布式版本控制")]),t._v(" "),s("p",[t._v("Git是属于分布式版本控制系统（Distributed Version Control System，简称 DVCS）")]),t._v(" "),s("ol",[s("li",[t._v("客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录")]),t._v(" "),s("li",[t._v("这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复")]),t._v(" "),s("li",[t._v("因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221008225409919.png",alt:"image-20221008225409919"}}),t._v(" "),s("p",[t._v("电脑上要想使用Git，我们需要先对Git进行安装：")]),t._v(" "),s("p",[t._v("Git的官网：https://git-scm.com/downloads")]),t._v(" "),s("p",[t._v("根据自己的操作系统下载Git即可；")]),t._v(" "),s("h2",{attrs:{id:"_6-bash-cmd-gui-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-bash-cmd-gui-区别"}},[t._v("#")]),t._v(" 6.Bash – CMD – GUI 区别")]),t._v(" "),s("p",[s("strong",[t._v("Bash，Unix shell 的一种，Linux 与 Mac OS X 都将它作为默认 shell")])]),t._v(" "),s("ol",[s("li",[t._v("Git Bash 就是一个 shell，是 Windows 下的命令行工具，可以执行 Linux 命令")]),t._v(" "),s("li",[t._v("Git Bash 是基于 CMD 的，在 CMD 的基础上增添一些新的命令与功能")]),t._v(" "),s("li",[t._v("所以建议在使用的时候，用 Bash 更加方便")])]),t._v(" "),s("p",[s("strong",[t._v("Git CMD")])]),t._v(" "),s("ol",[s("li",[t._v("命令行提示符（CMD）是 Windows 操作系统上的命令行解释程序")]),t._v(" "),s("li",[t._v("当你在Windows 上安装 git 并且习惯使用命令行时，可以使用 cmd 来运行 git 命令")])]),t._v(" "),s("p",[s("strong",[t._v("Git GUI")])]),t._v(" "),s("ol",[s("li",[t._v("基本上针对那些不喜欢黑屏（即命令行）编码的人")]),t._v(" "),s("li",[t._v("它提供了一个图形用户界面来运行 git 命令")])]),t._v(" "),s("h2",{attrs:{id:"_7-git的配置分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-git的配置分类"}},[t._v("#")]),t._v(" 7.Git的配置分类")]),t._v(" "),s("p",[t._v("既然已经在系统上安装了Git，你会需要做几件事来定制你的Git环境：")]),t._v(" "),s("ol",[s("li",[t._v("每台计算机上只需要配置一次，程序升级时会保留配置信息")]),t._v(" "),s("li",[t._v("你可以在任何时候再次通过运行命令来修改它们")])]),t._v(" "),s("p",[s("strong",[t._v("Git 自带一个 git config的工具来帮助设置控制Git外观和行为的配置变量：")])]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("/etc/gitconfig 文件：包含系统上每一个用户及他们仓库的通用配置")])],1),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果在执行 git config时带上——system 选项，那么它就会读写该文件中的配置变量；")])]),t._v(" "),s("li",[s("p",[t._v("由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。（开发中通常不修改）")])])]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("~/.gitconfig 或C/用户/用户名/.gitconfig 文件：只针对当前用户")])],1),t._v(" "),s("ul",[s("li",[t._v("你可以传递——global 选项让Git读写此文件，这会对你系统上所有的仓库生效")])]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("当前使用仓库的Git 目录中的 config 文件（即.git／config）：针对该仓库")])],1),t._v(" "),s("ul",[s("li",[t._v("你可以传递——local 选项让 Git强制读写此文件，虽然默认情况下用的就是它")])]),t._v(" "),s("h2",{attrs:{id:"_8-git的配置选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-git的配置选项"}},[t._v("#")]),t._v(" 8.Git的配置选项")]),t._v(" "),s("p",[t._v("安装Git后，要做的第一件事就是设置你的用户名和邮件地址。")]),t._v(" "),s("ol",[s("li",[t._v("这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改")]),t._v(" "),s("li",[t._v("如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009160343657.png",alt:"image-20221009160343657"}}),t._v(" "),s("p",[t._v("检测当前的配置信息："),s("code",[t._v("git config --list")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009160618081.png",alt:"image-20221009160618081"}}),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009160709826.png",alt:"image-20221009160709826"}}),t._v(" "),s("h2",{attrs:{id:"_9-git的别名-alias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-git的别名-alias"}},[t._v("#")]),t._v(" 9.Git的别名（alias）")]),t._v(" "),s("p",[t._v("Git 并不会在你输入部分命令时自动推断出你想要的命令。如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009161016535.png",alt:"image-20221009161016535"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009161611672.png",alt:"image-20221009161611672"}}),t._v(" "),s("h2",{attrs:{id:"_10-获取git仓库-git-init-git-clone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-获取git仓库-git-init-git-clone"}},[t._v("#")]),t._v(" 10.获取Git仓库 – git init/git clone")]),t._v(" "),s("p",[t._v("我们需要一个Git来管理源代码，那么我们本地也需要有一个Git仓库。")]),t._v(" "),s("p",[t._v("通常有两种获取 Git 项目仓库的方式：")]),t._v(" "),s("ol",[s("li",[t._v("初始化一个Git仓库，并且可以将当前项目的文件都添加到Git仓库中（目前很多的脚手架在创建项目时都会默认创建一个Git仓库）")]),t._v(" "),s("li",[t._v("从其它服务器克隆（clone）一个已存在的 Git 仓库（第一天到公司通常我们需要做这个操作）")])]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("方式一：初始化Git仓库"),s("code",[t._v("git init")])])],1),t._v(" "),s("ol",[s("li",[t._v("该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的核心")]),t._v(" "),s("li",[t._v("但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009164335634.png",alt:"image-20221009164335634"}}),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("方式二：从Git远程仓库克隆")])],1),t._v(" "),s("img",{staticStyle:{zoom:"37%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009164818302.png",alt:"image-20221009164818302"}}),t._v(" "),s("h2",{attrs:{id:"_11-文件的状态划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-文件的状态划分"}},[t._v("#")]),t._v(" 11.文件的状态划分")]),t._v(" "),s("p",[s("strong",[t._v("现在我们的电脑上已经有一个Git仓库：")])]),t._v(" "),s("ol",[s("li",[t._v("在实际开发中，你需要将某些文件交由这个Git仓库来管理")]),t._v(" "),s("li",[t._v("并且我们之后会修改文件的内容，当达成某一个目标时，想要记录下来这次操作，就会将它提交到仓库中")])]),t._v(" "),s("p",[s("strong",[t._v("那么我们需要对文件来划分不同的状态，以确定这个文件是否已经归于Git仓库的管理：")])]),t._v(" "),s("ol",[s("li",[s("font",{attrs:{color:"red"}},[t._v("未跟踪")]),t._v("：默认情况下，Git仓库下的文件也没有添加到Git仓库管理中，我们需要通过add命令来操作")],1),t._v(" "),s("li",[s("font",{attrs:{color:"red"}},[t._v("已跟踪")]),t._v("：添加到Git仓库管理的文件处于已跟踪状态，Git可以对其进行各种跟踪管理")],1)]),t._v(" "),s("p",[s("strong",[t._v("已跟踪的文件又可以进行细分状态划分：")])]),t._v(" "),s("ol",[s("li",[s("font",{attrs:{color:"red"}},[t._v("staged")]),t._v("：暂缓区中的文件状态")],1),t._v(" "),s("li",[s("font",{attrs:{color:"red"}},[t._v("Unmodified")]),t._v("：commit命令，可以将staged中文件提交到Git仓库")],1),t._v(" "),s("li",[s("font",{attrs:{color:"red"}},[t._v("Modified")]),t._v("：修改了某个文件后，会处于Modified状态")],1)]),t._v(" "),s("p",[s("strong",[t._v("在工作时，你可以选择性地将这些修改过的文件放入暂存区")])]),t._v(" "),s("p",[s("strong",[t._v("然后提交所有已暂存的修改，如此反复")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009165619298.png",alt:"image-20221009165619298"}}),t._v(" "),s("h2",{attrs:{id:"_12-git操作流程图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-git操作流程图"}},[t._v("#")]),t._v(" 12.Git操作流程图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009165722863.png",alt:"image-20221009165722863"}})]),t._v(" "),s("h2",{attrs:{id:"_13-检测文件的状态-git-status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-检测文件的状态-git-status"}},[t._v("#")]),t._v(" 13.检测文件的状态 - git status")]),t._v(" "),s("p",[t._v("我们在有Git仓库的目录下新建一个文件，查看文件的状态： "),s("code",[t._v("git status")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009172657550.png",alt:"image-20221009172657550"}}),t._v(" "),s("p",[s("strong",[t._v("Untracked files：未跟踪的文件")])]),t._v(" "),s("ol",[s("li",[t._v("未跟踪的文件意味着 Git 在之前的提交中没有这些文件")]),t._v(" "),s("li",[t._v("Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”")])]),t._v(" "),s("p",[s("strong",[t._v("我们也可以查看更加简洁的状态信息："),s("code",[t._v("git status –s")]),t._v(" 或"),s("code",[t._v("git status --short")])])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009172948027.png",alt:"image-20221009172948027"}}),t._v(" "),s("p",[t._v("左栏指明了暂存区的状态，右栏指明了工作区的状态")]),t._v(" "),s("h2",{attrs:{id:"_14-文件添加到暂存区-git-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-文件添加到暂存区-git-add"}},[t._v("#")]),t._v(" 14.文件添加到暂存区 – git add")]),t._v(" "),s("p",[s("strong",[t._v("跟踪新文件命令： "),s("code",[t._v("git add")])])]),t._v(" "),s("p",[t._v("使用命令 git add 开始跟踪一个文件，如git add aaa.js")]),t._v(" "),s("p",[t._v("跟踪修改的文件命令："),s("strong",[t._v("如果我们已经跟踪了某一个文件，这个时候修改了文件也需要重新添加到暂存区中")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009173646068.png",alt:"image-20221009173646068"}}),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009173755294.png",alt:"image-20221009173755294"}}),t._v(" "),s("p",[s("strong",[t._v("通过"),s("code",[t._v("git add .")]),t._v("将所有的文件添加到暂存区中")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009173920817.png",alt:"image-20221009173920817"}}),t._v(" "),s("h2",{attrs:{id:"_15-git忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-git忽略文件"}},[t._v("#")]),t._v(" 15.git忽略文件")]),t._v(" "),s("p",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。")]),t._v(" "),s("ol",[s("li",[t._v("通常都是些"),s("strong",[t._v("自动生成的文件")]),t._v("，比如日志文件，或者编译过程中创建的临时文件等")]),t._v(" "),s("li",[t._v("我们可以创建一个名为 "),s("code",[t._v(".gitignore")]),t._v(" 的文件，列出要忽略的文件的模式")])]),t._v(" "),s("p",[s("strong",[t._v("在实际开发中，这个文件通常不需要手动创建，在必须的时候添加自己的忽略内容即可")])]),t._v(" "),s("p",[t._v("比如下图所示为创建的Vue项目自动创建的忽略文件：")]),t._v(" "),s("ol",[s("li",[t._v("包括一些不需要提交的文件、文件夹")]),t._v(" "),s("li",[t._v("包括本地环境变量文件")]),t._v(" "),s("li",[t._v("包括一些日志文件")]),t._v(" "),s("li",[t._v("包括一些编辑器自动生成的文件")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009174228590.png",alt:"image-20221009174228590"}}),t._v(" "),s("h2",{attrs:{id:"_16-文件更新提交-git-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-文件更新提交-git-commit"}},[t._v("#")]),t._v(" 16.文件更新提交 – git commit")]),t._v(" "),s("p",[s("strong",[t._v("现在的暂存区已经准备就绪，可以提交了。")])]),t._v(" "),s("ol",[s("li",[t._v("每次准备提交前，先用 git status 看下，你所需要的文件是不是都已暂存起来了")]),t._v(" "),s("li",[t._v("再运行提交命令 "),s("code",[t._v("git commit")])]),t._v(" "),s("li",[t._v("可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009174434375.png",alt:"image-20221009174434375"}}),t._v(" "),s("p",[s("strong",[t._v("如果我们修改文件的add操作，加上commit的操作有点繁琐，那么可以将两个命令结合来使用：")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009174611976.png",alt:"image-20221009174611976"}}),t._v(" "),s("h2",{attrs:{id:"_17-git的校验和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-git的校验和"}},[t._v("#")]),t._v(" 17.Git的校验和")]),t._v(" "),s("p",[t._v("Git 中所有的数据在存储前都计算校验和，然后以==校验和==来引用。")]),t._v(" "),s("ol",[s("li",[t._v("Git 用以计算校验和的机制叫做 "),s("strong",[t._v("SHA-1 散列（hash，哈希）")])]),t._v(" "),s("li",[t._v("这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009174902996.png",alt:"image-20221009174902996"}})]),t._v(" "),s("h2",{attrs:{id:"_18-查看提交的历史-git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-查看提交的历史-git-log"}},[t._v("#")]),t._v(" 18.查看提交的历史 – git log")]),t._v(" "),s("p",[s("strong",[t._v("在提交了若干更新，又或者克隆了某个项目之后，有时候我们想要查看一下所有的历史提交记录。")])]),t._v(" "),s("p",[t._v("这个时候我们可以使用git log命令：")]),t._v(" "),s("ol",[s("li",[t._v("不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面")]),t._v(" "),s("li",[t._v("这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明")])]),t._v(" "),s("p",[t._v("==git log==")]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009175258615.png",alt:"image-20221009175258615"}}),t._v(" "),s("p",[t._v("==git log --pretty=oneline==")]),t._v(" "),s("p",[s("code",[t._v("--pretty＝")]),t._v("：使用其他格式显示历史提交信息")]),t._v(" "),s("p",[s("code",[t._v("--pretty=oneline")]),t._v("：一行显示，只显示哈希值和提交说明")]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009175440104.png",alt:"image-20221009175440104"}}),t._v(" "),s("p",[t._v("==git log --pretty=oneline --graph==")]),t._v(" "),s("p",[s("code",[t._v("--graph：显示ASCII图形表示的分支合并历史")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009175902267.png",alt:"image-20221009175902267"}}),t._v(" "),s("p",[s("strong",[t._v("参考链接")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/bellkosmos/p/5923439.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git log命令全解析，打log还能这么随心所欲！ - 赛艇队长 - 博客园 (cnblogs.com)"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_19-版本回退-git-reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-版本回退-git-reset"}},[t._v("#")]),t._v(" 19.版本回退 – git reset")]),t._v(" "),s("p",[s("strong",[t._v("如果想要进行版本回退，我们需要先知道目前处于哪一个版本：Git通过HEAD指针记录当前版本。")])]),t._v(" "),s("ol",[s("li",[t._v("HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交")]),t._v(" "),s("li",[t._v("理解 HEAD 的最简方式，就是将它看做==该分支上的最后一次提交的快照==")])]),t._v(" "),s("img",{staticStyle:{zoom:"25%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/git%20head%E7%A4%BA%E6%84%8F%E5%9B%BE.png",alt:"git head示意图"}}),t._v(" "),s("p",[s("strong",[t._v("我们可以通过HEAD来改变Git目前的版本指向：")])]),t._v(" "),s("ol",[s("li",[t._v("上一个版本就是HEAD^，上上一个版本就是HEAD ^^")]),t._v(" "),s("li",[t._v("如果是上1000个版本，我们可以使用HEAD~1000")]),t._v(" "),s("li",[t._v("我们可以可以指定某一个commit id")])]),t._v(" "),s("p",[s("code",[t._v("git reset --hard HEAD^")]),t._v(" "),s("code",[t._v("git reset --hard HEAD~1000")]),t._v(" "),s("code",[t._v("git reset --hard 2d44982")])]),t._v(" "),s("h2",{attrs:{id:"_20-什么是远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-什么是远程仓库"}},[t._v("#")]),t._v(" 20.什么是远程仓库？")]),t._v(" "),s("p",[s("strong",[t._v("什么是远程仓库（Remote Repository）呢？")])]),t._v(" "),s("ol",[s("li",[t._v("目前我们的代码是保存在一个本地仓库中，也就意味着我们只是在进行本地操作")]),t._v(" "),s("li",[t._v("在真实开发中，我们通常是多人开发的，所以我们会将管理的代码共享到远程仓库中")])]),t._v(" "),s("p",[s("strong",[t._v("那么如何创建一个远程仓库呢？")])]),t._v(" "),s("ol",[s("li",[t._v("远程仓库通常是搭建在某一个服务器上的（当然本地也可以，但是本地很难共享）")]),t._v(" "),s("li",[t._v("所以我们需要在Git服务器上搭建一个远程仓库")])]),t._v(" "),s("p",[s("strong",[t._v("目前我们有如下方式可以使用Git服务器：")])]),t._v(" "),s("ol",[s("li",[t._v("使用第三方的Git服务器：比如GitHub、Gitee、Gitlab等等")]),t._v(" "),s("li",[t._v("在自己服务器搭建一个Git服务")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009181221729.png",alt:"image-20221009181221729"}}),t._v(" "),s("h2",{attrs:{id:"_21-远程仓库的验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-远程仓库的验证"}},[t._v("#")]),t._v(" 21.远程仓库的验证")]),t._v(" "),s("p",[t._v("常见的远程仓库有哪些呢？目前比较流行使用的是三种：")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("自己搭建Gitlab")])]),t._v(" "),s("p",[s("strong",[t._v("对于私有的仓库我们想要进行操作，远程仓库会对我们的身份进行验证：")])]),t._v(" "),s("ul",[s("li",[t._v("如果没有验证，任何人都可以随意操作仓库是一件非常危险的事情")])]),t._v(" "),s("p",[s("strong",[t._v("目前Git服务器验证手段主要有两种：")])]),t._v(" "),s("ol",[s("li",[t._v("方式一：基于HTTP的凭证存储（Credential Storage）")]),t._v(" "),s("li",[t._v("方式二：基于SSH的密钥")])]),t._v(" "),s("p",[t._v("下面我们来具体讨论一下这两种方式的验证规则和过程")]),t._v(" "),s("h2",{attrs:{id:"_22-远程仓库的验证-凭证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-远程仓库的验证-凭证"}},[t._v("#")]),t._v(" 22.远程仓库的验证 – 凭证")]),t._v(" "),s("p",[s("strong",[t._v("因为本身HTTP协议是无状态的连接，所以每一个连接都需要用户名和密码：")])]),t._v(" "),s("ol",[s("li",[t._v("如果每次都这样操作，那么会非常麻烦")]),t._v(" "),s("li",[t._v("幸运的是，Git 拥有一个凭证系统来处理这个事情")])]),t._v(" "),s("p",[s("strong",[t._v("下面有一些 Git Crediential 的选项：")])]),t._v(" "),s("ol",[s("li",[t._v("选项一：默认所有都不缓存。 每一次连接都会询问你的用户名和密码")]),t._v(" "),s("li",[t._v("选项二：“cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除")]),t._v(" "),s("li",[t._v("选项三：“store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期")]),t._v(" "),s("li",[t._v("选项四：如果你使用的是 Mac，Git 还有一种“osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中（加密的）")]),t._v(" "),s("li",[t._v("选项五：如果你使用的是 Windows，你可以安装一个叫做 “"),s("a",{attrs:{href:"https://github.com/Microsoft/Git-Credential-Manager-for-Windows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Credential Manager for Windows"),s("OutboundLink")],1),t._v("” 的辅助工具")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009190010618.png",alt:"image-20221009190010618"}}),t._v(" "),s("h2",{attrs:{id:"_23-远程仓库的验证-ssh密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-远程仓库的验证-ssh密钥"}},[t._v("#")]),t._v(" 23.远程仓库的验证 – SSH密钥")]),t._v(" "),s("p",[s("strong",[t._v("Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。")])]),t._v(" "),s("p",[s("strong",[t._v("SSH以非对称加密实现身份验证")])]),t._v(" "),s("ol",[s("li",[t._v("例如其中一种方法是使用自动生成的公钥-私钥对来简单地加密网络连接，随后使用密码认证进行登录")]),t._v(" "),s("li",[t._v("另一种方法是人工生成一对公钥和私钥，通过生成的密钥进行认证，这样就可以在不输入密码的情况下登录")]),t._v(" "),s("li",[t._v("公钥需要放在待访问的电脑之中，而对应的私钥需要由用户自行保管")])]),t._v(" "),s("p",[s("strong",[t._v("如果我们以SSH的方式访问Git仓库，那么就需要生产对应的公钥和私钥：")])]),t._v(" "),s("p",[s("code",[t._v('ssh-keygen -t ed25519 -C “your email"')])]),t._v(" "),s("p",[s("code",[t._v('ssh-keygen -t rsa -b 2048 -C “your email"')])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009190542556.png",alt:"image-20221009190542556"}}),t._v(" "),s("h2",{attrs:{id:"_24-管理远程服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-管理远程服务器"}},[t._v("#")]),t._v(" 24.管理远程服务器")]),t._v(" "),s("p",[s("strong",[t._v("查看远程地址：比如我们之前从GitHub上clone下来的代码，它就是有自己的远程仓库的")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git remote")])]),t._v(" "),s("li",[s("code",[t._v("git remote –v")])]),t._v(" "),s("li",[t._v("-v是-verbose的缩写(冗长的)")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009202352056.png",alt:"image-20221009202352056"}}),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009202427696.png",alt:"image-20221009202427696"}}),t._v(" "),s("p",[s("strong",[t._v("添加远程地址：我们也可以继续添加远程服务器（让本地的仓库和远程服务器仓库建立连接）：")]),t._v(" "),s("code",[t._v("git remote add <shortname> <url>")])]),t._v(" "),s("p",[s("code",[t._v("git remote add gitlab http://152.136.185.210:7888/coderwhy/gitremotedemo.git")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009202725330.png",alt:"image-20221009202725330"}}),t._v(" "),s("p",[s("strong",[t._v("重命名远程地址：")]),t._v(" "),s("code",[t._v("git remote rename gitlab glab")])]),t._v(" "),s("p",[s("strong",[t._v("移除远程地址：")])]),t._v(" "),s("p",[s("code",[t._v("git remote remove gitlab")])]),t._v(" "),s("h2",{attrs:{id:"_25-本地分支的上游分支-跟踪分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-本地分支的上游分支-跟踪分支"}},[t._v("#")]),t._v(" 25.本地分支的上游分支（跟踪分支）")]),t._v(" "),s("p",[s("strong",[t._v("问题一：当前分支没有track的分支")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009202913172.png",alt:"image-20221009202913172"}}),t._v(" "),s("p",[s("strong",[t._v("原因：当前分支没有和远程的origin/master分支进行跟踪")])]),t._v(" "),s("p",[t._v("在没有跟踪的情况下，我们直接执行pull操作的时候必须指定从哪一个远程仓库中的哪一个分支中获取内容")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009212234254.png",alt:"image-20221009212234254"}}),t._v(" "),s("p",[s("strong",[t._v("如果我们想要直接执行git fetch是有一个前提的：必须给当前分支设置一个跟踪分支：")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009212436459.png",alt:"image-20221009212436459"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009212508874.png",alt:"image-20221009212508874"}}),t._v(" "),s("h2",{attrs:{id:"_26-拒绝合并不相干的历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-拒绝合并不相干的历史"}},[t._v("#")]),t._v(" 26.拒绝合并不相干的历史")]),t._v(" "),s("p",[s("strong",[t._v("问题二：合并远程分支时，拒绝合并不相干的历史")])]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009212751021.png",alt:"image-20221009212751021"}}),t._v(" "),s("p",[t._v("原因：我们将两个不相干的分支进行了合并：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git refusing to merge unrelated histories on rebase - Stack Overflow"),s("OutboundLink")],1)]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009212924274.png",alt:"image-20221009212924274"}}),t._v(" "),s("p",[t._v("简单来说就是：过去git merge允许将两个没有共同基础的分支进行合并，这导致了一个后果：新创建的项目可能被一个毫不怀疑的维护者合并了很多没有必要的历史，到一个已经存在的项目中，目前这个命令已经被纠正，但是我们依然可以通过``-allow-unrelated-histories`选项来逃逸这个限制，来合并两个独立的项目。")]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009213040526.png",alt:"image-20221009213040526"}}),t._v(" "),s("h2",{attrs:{id:"_27-远程仓库的交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-远程仓库的交互"}},[t._v("#")]),t._v(" 27.远程仓库的交互")]),t._v(" "),s("p",[s("strong",[t._v("从远程仓库clone代码：将存储库克隆到新创建的目录中")])]),t._v(" "),s("p",[s("code",[t._v("git clone https://github.com/uploadhub/uploadhub.git")])]),t._v(" "),s("p",[s("strong",[t._v("将代码push到远程仓库：将本地仓库的代码推送到远程仓库中")])]),t._v(" "),s("ul",[s("li",[t._v("默认情况下是将当前分支（比如master）push到origin远程仓库的")])]),t._v(" "),s("p",[s("code",[t._v("git push")]),t._v(" 、"),s("code",[t._v("git push origin master")])]),t._v(" "),s("p",[s("strong",[t._v("从远程仓库fetch代码：从远程仓库获取最新的代码")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("默认情况下是从origin中获取代码")]),t._v(" "),s("p",[s("code",[t._v("git fetch")]),t._v(" 、"),s("code",[t._v("git fetch origin")])])]),t._v(" "),s("li",[s("p",[t._v("获取到代码后默认并没有合并到本地仓库，我们需要通过merge来合并")]),t._v(" "),s("p",[s("code",[t._v("git merge")])])])]),t._v(" "),s("p",[s("strong",[t._v("从远程仓库pull代码：上面的两次操作有点繁琐，我们可以通过一个命令来操作")]),t._v(" "),s("code",[t._v("git pull")]),t._v("，等效于"),s("code",[t._v("git fetch + git merge(rebase)")])]),t._v(" "),s("h2",{attrs:{id:"_28-合并冲突-conflict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-合并冲突-conflict"}},[t._v("#")]),t._v(" 28.合并冲突（conflict）")]),t._v(" "),s("p",[t._v("上面我们通过pull命令从Git远程仓库获取到分支内容后会自动进行合并（merge）")]),t._v(" "),s("p",[t._v("但是并非所有的情况都可以正常的合并，某些情况下合并会出现冲突：")]),t._v(" "),s("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009213938962.png",alt:"image-20221009213938962"}}),t._v(" "),s("h2",{attrs:{id:"_29-常见的开源协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-常见的开源协议"}},[t._v("#")]),t._v(" 29.常见的开源协议")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/1591723-20190215111325975-1416113762.png",alt:"常见的开源协议及其联系和区别"}})]),t._v(" "),s("h2",{attrs:{id:"_30-git标签-tag-创建tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-git标签-tag-创建tag"}},[t._v("#")]),t._v(" 30.Git标签（tag） - 创建tag")]),t._v(" "),s("p",[s("strong",[t._v("对于重大的版本我们常常会打上一个标签，以表示它的重要性：")])]),t._v(" "),s("ol",[s("li",[t._v("Git 可以给仓库历史中的某一个提交打上标签")]),t._v(" "),s("li",[t._v("比较有代表性的是人们会使用这个功能来标记发布结点（ v1.0 、 v2.0 等等）")])]),t._v(" "),s("p",[s("strong",[t._v("创建标签：")])]),t._v(" "),s("ol",[s("li",[t._v("Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）")]),t._v(" "),s("li",[t._v("附注标签：通过-a选项，并且通过-m添加额外信息")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215223459.png",alt:"image-20221009215223459"}}),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215352487.png",alt:"image-20221009215352487"}}),t._v(" "),s("p",[s("strong",[t._v("默认情况下，git push 命令并不会传送标签到远程仓库服务器上")])]),t._v(" "),s("p",[t._v("在创建完标签后你必须显式地推送标签到共享服务器上，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215457574.png",alt:"image-20221009215457574"}}),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215537266.png",alt:"image-20221009215537266"}}),t._v(" "),s("h2",{attrs:{id:"_31-git标签-tag-删除和检出tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-git标签-tag-删除和检出tag"}},[t._v("#")]),t._v(" 31.Git标签（tag） - 删除和检出tag")]),t._v(" "),s("p",[s("strong",[t._v("删除本地tag：")])]),t._v(" "),s("p",[t._v("要删除掉你本地仓库上的标签，可以使用命令"),s("code",[t._v("git tag -d <tagname>")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215847662.png",alt:"image-20221009215847662"}}),t._v(" "),s("p",[s("strong",[t._v("删除远程tag：")])]),t._v(" "),s("p",[t._v("要删除远程的tag我们可以通过"),s("code",[t._v("git push <remote> –delete <tagname>")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009215947390.png",alt:"image-20221009215947390"}}),t._v(" "),s("p",[s("strong",[t._v("检出tag：")])]),t._v(" "),s("ol",[s("li",[t._v("如果你想查看某个标签所指向的文件版本，可以使用 "),s("code",[t._v("git checkout")]),t._v(" 命令")]),t._v(" "),s("li",[t._v("通常我们在检出tag的时候还会创建一个对应的分支（分支后续了解）")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009220112334.png",alt:"image-20221009220112334"}}),t._v(" "),s("h2",{attrs:{id:"_32-git提交对象-commit-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-git提交对象-commit-object"}},[t._v("#")]),t._v(" 32.Git提交对象（Commit Object）")]),t._v(" "),s("p",[s("strong",[t._v("几乎所有的版本控制系统都以某种形式支持分支")])]),t._v(" "),s("ul",[s("li",[t._v("使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线")])]),t._v(" "),s("p",[s("strong",[t._v("在进行提交操作时，Git 会保存一个提交对象（commit object）：")])]),t._v(" "),s("ol",[s("li",[t._v("该提交对象会包含一个指向暂存内容快照的指针")]),t._v(" "),s("li",[t._v("该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针")]),t._v(" "),s("li",[t._v("首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象")]),t._v(" "),s("li",[t._v("而由多个分支合并产生的提交对象有多个父对象")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009220307547.png",alt:"image-20221009220307547"}})]),t._v(" "),s("h2",{attrs:{id:"_33-git-master分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-git-master分支"}},[t._v("#")]),t._v(" 33.Git master分支")]),t._v(" "),s("p",[s("strong",[t._v("Git 的分支，其实本质上仅仅是指向提交对象的可变指针。")])]),t._v(" "),s("ol",[s("li",[t._v("Git 的默认分支名字是 master，在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支")]),t._v(" "),s("li",[t._v("master 分支会在每次提交时自动移动")])]),t._v(" "),s("p",[s("strong",[t._v("Git 的 master 分支并不是一个特殊分支。")])]),t._v(" "),s("ol",[s("li",[t._v("它就跟其它分支完全没有区别")]),t._v(" "),s("li",[t._v("之所以几乎每一个仓库都有 master 分支，是因为 git init 命令默认创建它，并且大多数人都懒得去改动它")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009220446448.png",alt:"image-20221009220446448"}}),t._v(" "),s("h2",{attrs:{id:"_34-git创建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34-git创建分支"}},[t._v("#")]),t._v(" 34.Git创建分支")]),t._v(" "),s("p",[s("strong",[t._v("Git 是怎么创建新分支的呢？")])]),t._v(" "),s("ul",[s("li",[t._v("很简单，它只是为你创建了"),s("strong",[t._v("一个可以移动的新的指针")])])]),t._v(" "),s("p",[s("strong",[t._v("比如，创建一个 testing 分支，你需要使用 git branch 命令：")])]),t._v(" "),s("p",[s("code",[t._v("git branch testing")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009220720372.png",alt:"image-20221009220720372"}}),t._v(" "),s("p",[s("strong",[t._v("那么，Git 又是怎么知道当前在哪一个分支上呢？")])]),t._v(" "),s("ul",[s("li",[t._v("也很简单，它也是通过一个名为 HEAD 的特殊指针")])]),t._v(" "),s("p",[s("code",[t._v("git checkout testing")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009220829762.png",alt:"image-20221009220829762"}}),t._v(" "),s("h2",{attrs:{id:"_35-git分支提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-git分支提交"}},[t._v("#")]),t._v(" 35.Git分支提交")]),t._v(" "),s("p",[s("strong",[t._v("如果我们指向某一个分支，并且在这个分支上提交：")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009221015880.png",alt:"image-20221009221015880"}}),t._v(" "),s("p",[s("strong",[t._v("你也可以切换回到master分支，继续开发：")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009221050081.png",alt:"image-20221009221050081"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009221110736.png",alt:"image-20221009221110736"}}),t._v(" "),s("h2",{attrs:{id:"_36-创建分支同时切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36-创建分支同时切换"}},[t._v("#")]),t._v(" 36.创建分支同时切换")]),t._v(" "),s("ol",[s("li",[t._v("通常我们会在创建一个新分支后立即切换过去")]),t._v(" "),s("li",[t._v("这可以用 "),s("code",[t._v("git checkout -b <newbranchname>")]),t._v(" 一条命令搞定")])]),t._v(" "),s("h2",{attrs:{id:"_37-为什么需要使用分支呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37-为什么需要使用分支呢"}},[t._v("#")]),t._v(" 37.为什么需要使用分支呢？")]),t._v(" "),s("p",[s("strong",[t._v("让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。")])]),t._v(" "),s("ol",[s("li",[t._v("开发某个项目，在默认分支master上进行开发")]),t._v(" "),s("li",[t._v("实现项目的功能需求，不断提交")]),t._v(" "),s("li",[t._v("并且在一个大的版本完成时，发布版本，打上一个tag v1.0.0")])]),t._v(" "),s("p",[s("strong",[t._v("继续开发后续的新功能，此时，你突然接到一个电话说有个很严重的问题需要紧急修补， 你将按照如下方式来处理：")])]),t._v(" "),s("ul",[s("li",[t._v("切换到tag v1.0.0的版本，并且创建一个分支hotfix")])]),t._v(" "),s("p",[s("strong",[t._v("想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：")])]),t._v(" "),s("p",[s("code",[t._v("git checkout –b hotfix")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009221915685.png",alt:"image-20221009221915685"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009221939471.png",alt:"image-20221009221939471"}}),t._v(" "),s("h3",{attrs:{id:"_38-分支开发和合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38-分支开发和合并"}},[t._v("#")]),t._v(" 38.分支开发和合并")]),t._v(" "),s("p",[s("strong",[t._v("分支上开发、修复bug：")])]),t._v(" "),s("ol",[s("li",[t._v("我们可以在创建的hotfix分支上继续开发工作或者修复bug")]),t._v(" "),s("li",[t._v("当完成要做的工作后，重新打上一个新的tag v1.0.1")])]),t._v(" "),s("p",[s("strong",[t._v("切换回master分支，但是这个时候master分支也需要修复刚刚的bug：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("所以我们需要将master分支和hotfix分支进行合并")]),t._v(" "),s("p",[s("code",[t._v("git checkout master")])]),t._v(" "),s("p",[s("code",[t._v("git merge hotfix")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009222151130.png",alt:"image-20221009222151130"}})]),t._v(" "),s("h2",{attrs:{id:"_39-查看和删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39-查看和删除分支"}},[t._v("#")]),t._v(" 39.查看和删除分支")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("如果我们希望查看当前所有的分支，可以通过以下命令：")]),t._v(" "),s("code",[t._v("git branch")]),t._v(" # 查看当前所有的分支")]),t._v(" "),s("li",[s("code",[t._v("git branch –v")]),t._v(" # 同时查看最后一次提交")]),t._v(" "),s("li",[s("code",[t._v("git branch --merged")]),t._v(" # 查看所有合并到当前分支的分支")]),t._v(" "),s("li",[s("code",[t._v("git branch --no-merged")]),t._v(" # 查看所有没有合并到当前分支的分支")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009222353738.png",alt:"image-20221009222353738"}}),t._v(" "),s("p",[s("strong",[t._v("如果某些已经合并的分支我们不再需要了，那么可以将其移除掉：")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git branch –d hotfix")]),t._v(" # 删除当前分支")]),t._v(" "),s("li",[s("code",[t._v("git branch –D hotfix")]),t._v(" # 强制删除某一个分支")])]),t._v(" "),s("h2",{attrs:{id:"_40-git的工作流-git-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40-git的工作流-git-flow"}},[t._v("#")]),t._v(" 40.Git的工作流（git flow）")]),t._v(" "),s("p",[s("strong",[t._v("由于Git上分支的使用的便捷性，产生了很多Git的工作流：")])]),t._v(" "),s("ol",[s("li",[t._v("也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支")]),t._v(" "),s("li",[t._v("你可以定期地把某些主题分支合并入其他分支中")])]),t._v(" "),s("p",[s("strong",[t._v("比如以下的工作流：")])]),t._v(" "),s("ol",[s("li",[t._v("master作为主分支")]),t._v(" "),s("li",[t._v("develop作为开发分支，并且有稳定版本时，合并到master分支中")]),t._v(" "),s("li",[t._v("topic作为某一个主题或者功能或者特性的分支进行开发，开发完成后合并到develop分支中")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009222608107.png",alt:"image-20221009222608107"}}),t._v(" "),s("h2",{attrs:{id:"_41-比较常见的git-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41-比较常见的git-flow"}},[t._v("#")]),t._v(" 41.比较常见的git flow")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009222654822.png",alt:"image-20221009222654822"}})]),t._v(" "),s("h2",{attrs:{id:"_42-git的远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42-git的远程分支"}},[t._v("#")]),t._v(" 42.Git的远程分支")]),t._v(" "),s("p",[s("strong",[t._v("远程分支是也是一种分支结构：以"),s("code",[t._v("<remote>/<branch>")]),t._v(" 的形式命名的")])]),t._v(" "),s("p",[s("strong",[t._v("如果我们刚刚clone下来代码，分支的结构如下：")])]),t._v(" "),s("p",[s("strong",[t._v("如果其他人修改了代码，那么远程分支结构如下：")])]),t._v(" "),s("ul",[s("li",[t._v("你需要通过fetch来获取最新的远程分支提交信息")])]),t._v(" "),s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009222834147.png",alt:"image-20221009222834147"}}),t._v(" "),s("h2",{attrs:{id:"_43-远程分支的管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43-远程分支的管理"}},[t._v("#")]),t._v(" 43.远程分支的管理")]),t._v(" "),s("p",[s("strong",[t._v("操作一：推送分支到远程")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上")])]),t._v(" "),s("li",[s("p",[t._v("运行 "),s("code",[t._v("git push <remote> <branch>")])]),t._v(" "),s("p",[t._v("如"),s("code",[t._v("git push origin <branch>")])])])]),t._v(" "),s("p",[s("strong",[t._v("操作二：跟踪远程分支")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支")])]),t._v(" "),s("li",[s("p",[t._v("如果你愿意的话可以设置其他的跟踪分支，可以通过运行 git checkout --track "),s("remote",[t._v("/"),s("branch")],1)],1)]),t._v(" "),s("li",[s("p",[t._v("如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支"),s("code",[t._v("git checkout --track <remote>/<branch>")])]),t._v(" "),s("p",[t._v("如"),s("code",[t._v("git checkout <branch>")])])])]),t._v(" "),s("p",[s("strong",[t._v("操作三：删除远程分支")])]),t._v(" "),s("ul",[s("li",[t._v("如果某一个远程分支不再使用，我们想要删除掉，可以运行带有 --delete 选项的 git push 命令来删除一个远程分支 "),s("code",[t._v("git push origin --delete <branch>")])])]),t._v(" "),s("h2",{attrs:{id:"_44-git-rebase用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44-git-rebase用法"}},[t._v("#")]),t._v(" 44.Git rebase用法")]),t._v(" "),s("p",[s("strong",[t._v("在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。")])]),t._v(" "),s("img",{staticStyle:{zoom:"15%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/rebase%E7%94%A8%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE1.png",alt:"rebase用法示意图1"}}),t._v(" "),s("img",{staticStyle:{zoom:"15%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/rebase%E7%94%A8%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE2.png",alt:"rebase用法示意图2"}}),t._v(" "),s("p",[s("strong",[t._v("什么是rebase呢？")])]),t._v(" "),s("p",[t._v("在上面的图例中，你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次；在 Git 中，这种操作就叫做变基（rebase）；你可以使用 rebase 命令"),s("strong",[t._v("将提交到某一分支上的所有修改都移至另一分支上")]),t._v("，就好像“重新播放”一样。")]),t._v(" "),s("p",[s("strong",[t._v("rebase这个单词如何理解呢？")])]),t._v(" "),s("ol",[s("li",[t._v("我们可以将其理解成改变当前分支的base")]),t._v(" "),s("li",[t._v("比如在分支experiment上执行rebase master，那么可以改变experiment的base为master")])]),t._v(" "),s("h2",{attrs:{id:"_45-rebase的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45-rebase的原理"}},[t._v("#")]),t._v(" 45.rebase的原理")]),t._v(" "),s("p",[s("strong",[t._v("rebase是如何工作的呢？")])]),t._v(" "),s("ol",[s("li",[t._v("它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2")]),t._v(" "),s("li",[t._v("然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件")]),t._v(" "),s("li",[t._v("然后将当前分支指向目标基底 C3")]),t._v(" "),s("li",[t._v("最后以此将之前另存为临时文件的修改依序应用")])]),t._v(" "),s("p",[s("strong",[t._v("我们可以再次执行master上的合并操作：")]),t._v(" "),s("code",[t._v("git checkout master")])]),t._v(" "),s("p",[s("code",[t._v("git merge experiment")])]),t._v(" "),s("img",{staticStyle:{zoom:"15%"},attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/rebase%E7%94%A8%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE3.png",alt:"rebase用法示意图3"}}),t._v(" "),s("h2",{attrs:{id:"_46-rebase和merge的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_46-rebase和merge的选择"}},[t._v("#")]),t._v(" 46.rebase和merge的选择")]),t._v(" "),s("p",[s("strong",[t._v("事实上，rebase和merge是对Git历史的不同处理方法：")])]),t._v(" "),s("ol",[s("li",[s("font",{attrs:{color:"red"}},[t._v("merge用于记录git的所有历史")]),t._v("，那么分支的历史错综复杂，也全部记录下来")],1),t._v(" "),s("li",[s("font",{attrs:{color:"red"}},[t._v("rebase用于简化历史记录")]),t._v("，将两个分支的历史简化，整个历史更加简洁")],1)]),t._v(" "),s("p",[t._v("了解了rebase的底层原理，就可以根据自己的特定场景选择merge或者rebase。")]),t._v(" "),s("p",[s("strong",[t._v("注意：rebase有一条黄金法则："),s("font",{attrs:{color:"red"}},[t._v("永远不要在主分支上使用rebase")])],1)]),t._v(" "),s("ol",[s("li",[t._v("如果在主分支上面使用rebase，会造成大量的提交历史在main分支中不同")]),t._v(" "),s("li",[t._v("而多人开发时，其他人依然在原来的主分支中，对于提交历史来说会有很大的变化")])]),t._v(" "),s("h2",{attrs:{id:"_47-git常见命令速查表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_47-git常见命令速查表"}},[t._v("#")]),t._v(" 47.Git常见命令速查表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://getpic.oss-cn-shenzhen.aliyuncs.com/image-20221009225618880.png",alt:"image-20221009225618880"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);